/*
Given the head of a singly linked list, return the middle node of the linked list.
If there are two middle nodes, return the second middle node.

Example 1:
Input: head = [1,2,3,4,5]
Output: [3,4,5]
Explanation: The middle node of the list is node 3.

Example 2:
Input: head = [1,2,3,4,5,6]
Output: [4,5,6]
Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.
 
Constraints:
The number of nodes in the list is in the range [1, 100].
1 <= Node.val <= 100

Complexity:

Time complexity:
Calculating the length of the linked list takes O(n) time.
Traversing halfway through the list also takes O(n/2) time.
Overall time complexity is O(n).

Space complexity:
The space complexity is O(1) because we are not using any extra space proportional to the size of the input.
*/

//method-1 bruteforce
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode middleNode(ListNode head) {
        int size=1;
        ListNode start=head;
        while(start.next!=null)
        {
            size++;
            start=start.next;
        }

        int i=0;
        ListNode middle=head;
        while(i<size/2)
        {
            middle=middle.next;
            i++;
        }

        return middle;
    }
}

//method-2 By using slow and fast pointers
Time complexity:O(n)
Space complexity:O(1)
Traversal: Move the fast pointer two steps at a time and the slow pointer one step at a time. 
This ensures that when the fast pointer reaches the end of the list, the slow pointer will be at the middle node.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode middleNode(ListNode head) {
        //head will never be null(constraint:no of nodes are in range[1,100])
        if(head.next==null)
            return head;

        ListNode fast=head;
        ListNode slow=head;

        while(fast!=null && fast.next!=null)
        {
            fast=fast.next.next;
            slow=slow.next;
        }
        return slow;
    }
}
