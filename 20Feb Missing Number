/*
Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.

Example 1:
Input: nums = [3,0,1]
Output: 2
Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.

Example 2:
Input: nums = [0,1]
Output: 2
Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.

Example 3:
Input: nums = [9,6,4,2,3,5,7,0,1]
Output: 8
Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.

Constraints:

n == nums.length
1 <= n <= 104
0 <= nums[i] <= n
All the numbers of nums are unique.
*/

//Bruteforce
class Solution {
    public int missingNumber(int[] nums) {
        int n=nums.length;
        int a[]=new int[n+1];
        Arrays.fill(a,-1);
        for(int i=0;i<n;i++)
        {
            a[nums[i]]=nums[i];
        }
        for(int i=0;i<=n;i++)
        {
            if(a[i]==-1)
                return i;
        }
        return -1;
    }
}

//Using array sorting TC:O(nlogn)  SC:O(1)
class Solution {
    public int missingNumber(int[] nums) {
        int n=nums.length;
        Arrays.sort(nums);
        for(int i=0;i<n;i++)
        {
            if(nums[i]!=i)
             return i;
        }
        return n;
    }
}

//Using bit magic TC:O(n),SC:O(1)
class Solution {
    public int missingNumber(int[] nums) {
        int n=nums.length;
        int ans=0;
        for(int i=1;i<=n;i++)
            ans=ans^i;
        
        for(int i=0;i<n;i++)
            ans=ans^nums[i];
        
        return ans;
    }
}

//Using Sum of all elements TC:O(n) SC:O(1)
class Solution {
    public int missingNumber(int[] nums) {
        int n=nums.length;
        int sum=(n*(n+1))/2;
        for(int i=0;i<n;i++)
        {
            sum-=nums[i];
        }
        return sum;
    }
}


