/*
Given the root of a binary tree, return the leftmost value in the last row of the tree.

Example 1:
Input: root = [2,1,3]
Output: 1

Example 2:
Input: root = [1,2,3,4,null,5,6,null,null,7]
Output: 7
*/

//method-1 using dfs MORE OPTIMIZED
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    /*
    Go to every row
    On every row go to left most value
    Main aim-Last row(leftmost value)

    Keep on going as depth increase->To go on the last row
                      +
    Only go on the left first and then can update it acc to the condition

    Simple tree traversal to go to the maximum depth
    */

    static int maxdepth,bottomLeftValue;
    public static void dfs(TreeNode node,int depth)
    {
        if(node==null)return;

        if(depth>maxdepth)
        {
            maxdepth=depth;
            bottomLeftValue=node.val;
        }

        dfs(node.left,depth+1);
        dfs(node.right,depth+1);
    }

    public int findBottomLeftValue(TreeNode root) {
        maxdepth=-1;
        bottomLeftValue=0;
        dfs(root,0);
        return bottomLeftValue;
    }
}

//method-2 Using bfs
//bfs uses a queue and in the queue you push the elements
//as the depth is increasing so the first element I will grab out of the queue is the left element(ans)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int findBottomLeftValue(TreeNode root) {
        Queue<TreeNode> q=new LinkedList<>();
        TreeNode cur=root;
        q.add(cur);

        int maxdepth=-1,depth=0,bottomLeftValue=0;
        while(!q.isEmpty())
        {
            int size=q.size();//in current level you have these many no of elements
            depth++;
            for(int i=0;i<size;i++)
            {
                cur=q.poll();//in cpp it is: cur=q.front(); q.pop();
                if(maxdepth<depth){
                    maxdepth=depth;
                    bottomLeftValue=cur.val;
                }

                if(cur.left!=null)q.add(cur.left);
                if(cur.right!=null)q.add(cur.right);
            }
        }
        return bottomLeftValue;
    }
}
