/*
Given an integer array nums sorted in non-decreasing order,
return an array of the squares of each number sorted in non-decreasing order.

Example 1:
Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Explanation: After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100].

Example 2:
Input: nums = [-7,-3,2,3,11]
Output: [4,9,9,49,121]

Constraints:
1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums is sorted in non-decreasing order.
*/

//method-1 TC:O(nlogn) SC:O(1)
class Solution {
    public int[] sortedSquares(int[] nums) {
        for(int i=0;i<nums.length;i++)
        {
            nums[i]*=nums[i];
        }
        Arrays.sort(nums);
        return nums;
    }
}

//method-2 TC:O(n) SC:O(n)

/*
Since the original array is not sorted, it's not guaranteed that the largest elements (in terms of absolute value) are at the ends of the array.

By iterating backwards from the end of the array, we can start populating the result array from the end, 
ensuring that the squares of larger elements occupy the higher indices of the result array
*/

class Solution {
    public int[] sortedSquares(int[] nums) {
        int n=nums.length;
        int ans[]=new int[n];
        int start=0,end=n-1;

        for(int i=n-1;i>=0;i--)//iterating backwards
        {
            if(Math.abs(nums[start])>=Math.abs(nums[end]))
            {
                ans[i]=Math.abs(nums[start])*Math.abs(nums[start]);
                start+=1;
            }
            else
            {
                ans[i]=nums[end]*nums[end];
                end-=1;
            }
        }
        return ans;
    }
}
