/*
Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.

Example 1:
Input: s = "leetcode"
Output: 0

Example 2:
Input: s = "loveleetcode"
Output: 2

Example 3:
Input: s = "aabb"
Output: -1
*/

//method-1
class Solution {
    public int firstUniqChar(String s) {
        HashMap<Character,Integer> map=new HashMap<>();
        for(char i:s.toCharArray())
        {
         map.put(i,map.getOrDefault(i,0)+1);
        }

        // HashSet<Character> set=new HashSet<>();
        // for(Map.Entry<Character,Integer> e: map.entrySet())
        // {
        //     if(e.getValue()==1)
        //      set.add(e.getKey());
        // }

        for(int i=0;i<s.length();i++)
        {
            // if(set.contains(s.charAt(i)))
            if(map.get(s.charAt(i))==1)
             return i;
        }
        return -1;
    }
}

//method-2 More optimized
class Solution {
    public int firstUniqChar(String s) {
        int alpha[]=new int[26];
        int index;
        for(int i=0;i<s.length();i++)
        {
            index=s.charAt(i)-'a';//s consists of only lowercase chars
            alpha[index]++;
        }

        for(int i=0;i<s.length();i++)
        {
          index=s.charAt(i)-'a';
          if(alpha[index]==1)
           return i;
        }
        return -1;
    }
}

//method-3 The optimized solution
/*indexOf will return first index of alphabet and lastIndexOf will return last index
if both are equal then it has occured only once.
through this we will get all index's which are occured once
but our answer is lowest index*/


class Solution {
    public int firstUniqChar(String s) {
        // Stores lowest index / first index
        int ans=Integer.MAX_VALUE;
        
        for(char i='a';i<='z';i++)// Iterate from a to z which is 26 which makes it constant
        {
            int index=s.indexOf(i);
            if(index!=-1 && index==s.lastIndexOf(i))
             ans=Math.min(ans,index);
        }
        return ans==Integer.MAX_VALUE?-1:ans;// If ans remain's Integer.MAX_VALUE then their is no unique character
    }
}
